#tag: Version tag string to be replaced (optional -- if unspecified @VERSION@ is assumed)
#
#sourcefile: File to obtain the actual version from (optional -- if unspecified, .version is assumed)
#            If this file is executable, it will be executed and the output will be used as the version string.
#            Otherwise it will be read and its contents will be used as the version string.
#			 The contents are validated by the update_version.sh string to verify that they match the
#			 expected version formatting (essentially semver, with a minor exception -- see the script header
#			 for details).
#sourcefile-novalidate: This is identical to the previous tag, except that the only validation that is
#            done is to verify that the version string is not blank and does not contain strings which will
#			 disrupt the sed command used for the version tag replacement. Essentially, it cannot contain
#            double quotes, forward slashes, or hash symbols.
#targetfile: file in which to have version tags replaced. When this line is reached, the replacement
#            action is performed on this file.
#
#Multiples of any of these lines are allowed. A given line is in effect until another line overrides it.
#For this purpose, the sourcefile and sourcefile-novalidate lines are considered the same (that is, they
#override each other).

# This file will have @VERSION@ strings replaced with the contents of .version
targetfile: my/favorite/file.yaml


tag: @TAG1@
# This file will still get its version from .version, but it will have @TAG1@ being replaced
targetfile: another/file.ini


sourcefile-novalidate: path/to/version1.txt

# These files will have @TAG1@ replaced with the version from path/to/version1.txt, which will not
# undergo the usual level of validation.
targetfile: my/file.py
targetfile: other/file.yaml


tag: @TAG2@

# This file will have @TAG2@ replaced with the version from path/to/version1.txt
targetfile: a/b/c.txt

